import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset, random_split
import pandas as pd
import numpy as np

# 讀取圖像數據
train_images = torch.load('train_images.pt').unsqueeze(1).float()  # [60000, 1, 28, 28]
test_images = torch.load('test_images.pt').unsqueeze(1).float()    # [10000, 1, 28, 28]

# 歸一化處理 (0~255 -> 0~1)
train_images /= 255.0
test_images /= 255.0

# 讀取標籤
labels_df = pd.read_csv('train_labels.csv')
train_labels = torch.tensor(labels_df['label'].values).long()

# 將數據集切分為訓練集和驗證集（8:2）
dataset = TensorDataset(train_images, train_labels)
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_set, val_set = random_split(dataset, [train_size, val_size])

train_loader = DataLoader(train_set, batch_size=64, shuffle=True)
val_loader = DataLoader(val_set, batch_size=64)
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.fc = nn.Linear(32 * 7 * 7, 10)  # 28x28 -> 14x14 -> 7x7

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = self.pool1(x)
        x = torch.relu(self.conv2(x))
        x = self.pool2(x)
        x = x.view(-1, 32 * 7 * 7)
        x = self.fc(x)
        return x

model = SimpleCNN()
# 損失函數與優化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 訓練模型
def evaluate(loader):
    model.eval()
    total_loss, correct, total = 0, 0, 0
    with torch.no_grad():
        for images, labels in loader:
            outputs = model(images)
            loss = criterion(outputs, labels)
            total_loss += loss.item() * labels.size(0)
            preds = outputs.argmax(1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)
    return total_loss / total, correct / total

for epoch in range(5):
    model.train()
    running_loss, correct, total = 0, 0, 0
    for images, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item() * labels.size(0)
        preds = outputs.argmax(1)
        correct += (preds == labels).sum().item()
        total += labels.size(0)

    train_loss = running_loss / total
    train_acc = correct / total
    val_loss, val_acc = evaluate(val_loader)
    print(f'Epoch {epoch+1}: Train Loss={train_loss:.4f}, Acc={train_acc:.4f} | Val Loss={val_loss:.4f}, Acc={val_acc:.4f}')
def calculate_score(accuracy):
    x = accuracy * 100
    if x >= 90:
        return 50 - 2 * (100 - x)
    elif x >= 80:
        return 30 - (90 - x)
    elif x >= 50:
        return 20 * (x - 50) / 30
    else:
        return 0
test_loader = DataLoader(test_images, batch_size=64)
model.eval()
all_preds = []

with torch.no_grad():
    for images in test_loader:
        outputs = model(images)
        preds = outputs.argmax(1)
        all_preds.append(preds)

final_predictions = torch.cat(all_preds)


# 構建 submission DataFrame
submission = pd.DataFrame({
    'id': list(range(len(final_predictions))),
    'label': final_predictions.numpy()
})

# 保存為 CSV 文件
submission.to_csv('submission.csv', index=False)
print("submission.csv 已成功保存。")
